version: '3.8'

services:
  # AI-Powered Customer Feedback Analysis API
  feedback-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: feedback-analysis-api
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./exports:/app/exports
      - ./config.ini:/app/config.ini
    networks:
      - feedback-network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: feedback-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - feedback-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: feedback-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: feedback_analysis
      POSTGRES_USER: feedback_user
      POSTGRES_PASSWORD: feedback_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - feedback-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U feedback_user -d feedback_analysis"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: feedback-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - feedback-network
    depends_on:
      - feedback-api
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: feedback-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - feedback-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: feedback-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - feedback-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  feedback-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

